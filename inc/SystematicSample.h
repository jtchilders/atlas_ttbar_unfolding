// This file is automatically generated by the script:
// scripts/makeSystematicSample.py
// do not edit directly

#ifndef SYSTEMATICSAMPLE_H
#define SYSTEMATICSAMPLE_H

#include <string>
#include <iostream>

class SystematicSample{
public:

   enum Sample{
      NOMINAL,
      BTAGSFUP,
      BTAGSFDOWN,
      CTAGSFUP,
      CTAGSFDOWN,
      MISTAGSFUP,
      MISTAGSFDOWN,
      EERU,
      EERD,
      EESU,
      EESD,
      JEFF,
      JER,
      LOOSE,
      MUIDU,
      MUIDD,
      MUSC,
      MUMSU,
      MUMSD,
      LEP_ID_SFUP,
      LEP_ID_SFDOWN,
      LEP_RECO_SFUP,
      LEP_RECO_SFDOWN,
      LEP_TRIG_SFUP,
      LEP_TRIG_SFDOWN,
      WJETS_IQOPT3,
      WJETS_PTJMIN10,
      WJETS_BB4_UP,
      WJETS_BB4_DOWN,
      WJETS_BB5_UP,
      WJETS_BB5_DOWN,
      WJETS_BBCCC_UP,
      WJETS_BBCCC_DOWN,
      WJETS_BBCC_UP,
      WJETS_BBCC_DOWN,
      WJETS_C4_UP,
      WJETS_C4_DOWN,
      WJETS_C5_UP,
      WJETS_C5_DOWN,
      WJETS_CA_UP,
      WJETS_CA_DOWN,
      IFSRPLUS,
      IFSRMINUS,
      FSRPLUS,
      FSRMINUS,
      ISRPLUS,
      ISRMINUS,
      ALPGENJIMMY,
      POWHEG_JIMMY,
      POWHEG_PYTHIA,
      QCDSU,
      QCDSD,
      QCDU,
      QCDD,
      UNFOLDING,
      BINBYBIN,
      MIGRATIONTOYS,
      PDF,
      HADRONIZATION,
      LUMI,
      MC_GENERATOR,
      BJESUNC_UP,
      BJESUNC_DOWN,
      CLOSEBY_UP,
      CLOSEBY_DOWN,
      EFFECTIVENP_DET1_UP,
      EFFECTIVENP_DET1_DOWN,
      EFFECTIVENP_DET2_UP,
      EFFECTIVENP_DET2_DOWN,
      EFFECTIVENP_MIXED1_UP,
      EFFECTIVENP_MIXED1_DOWN,
      EFFECTIVENP_MIXED2_UP,
      EFFECTIVENP_MIXED2_DOWN,
      EFFECTIVENP_MODEL1_UP,
      EFFECTIVENP_MODEL1_DOWN,
      EFFECTIVENP_MODEL2_UP,
      EFFECTIVENP_MODEL2_DOWN,
      EFFECTIVENP_MODEL3_UP,
      EFFECTIVENP_MODEL3_DOWN,
      EFFECTIVENP_MODEL4_UP,
      EFFECTIVENP_MODEL4_DOWN,
      EFFECTIVENP_STAT1_UP,
      EFFECTIVENP_STAT1_DOWN,
      EFFECTIVENP_STAT2_UP,
      EFFECTIVENP_STAT2_DOWN,
      EFFECTIVENP_STAT3_UP,
      EFFECTIVENP_STAT3_DOWN,
      ETAINTERCALIBRATION_THEORY_UP,
      ETAINTERCALIBRATION_THEORY_DOWN,
      ETAINTERCALIBRATION_TOTALSTAT_UP,
      ETAINTERCALIBRATION_TOTALSTAT_DOWN,
      FLAVOR_COMP_UP,
      FLAVOR_COMP_DOWN,
      FLAVOR_RESPONSE_UP,
      FLAVOR_RESPONSE_DOWN,
      PILEUP_OFFSETMU_UP,
      PILEUP_OFFSETMU_DOWN,
      PILEUP_OFFSETNPV_UP,
      PILEUP_OFFSETNPV_DOWN,
      RELATIVENONCLOSURE_MC11B_UP,
      RELATIVENONCLOSURE_MC11B_DOWN,
      SINGLEPARTICLE_HIGHPT_UP,
      SINGLEPARTICLE_HIGHPT_DOWN,
      CELLOUTU,
      CELLOUTD,
      PILEUPU,
      PILEUPD,
      BKGD_JES_UP,
      BKGD_JES_DOWN,
      JESU,
      JESD,
      NUM_OF_SAMPLES
   };
   
   SystematicSample(void){m_sample = NUM_OF_SAMPLES;};
   SystematicSample(const Sample sample){SetSample(sample);};
   SystematicSample(const std::string sample){SetSample(sample);};
   SystematicSample(const SystematicSample& sample){SetSample(sample.sample());};
   SystematicSample& operator=(const Sample sample){SetSample(sample);};
   SystematicSample& operator=(const std::string sample){SetSample(sample);};
   SystematicSample& operator=(const SystematicSample& sample){SetSample(sample.sample());};
   
   void SetSample(const Sample sample){
      m_sample=sample;
      m_sampleString=GetSampleString(m_sample);
      m_isUp = GetUp(m_sample);
      m_isDown = GetDown(m_sample);
   };
   
   void SetSample(const std::string sample){
      SetSample(GetSampleEnum(sample));
      if(m_sample == NUM_OF_SAMPLES){
         std::cerr << "[SystematicSample::SetSample] Error, incorrect sample string passed " << sample << "\n";
      }
   }
   
   bool isUp(void){return m_isUp;};
   bool isDown(void){return m_isDown;};
   
   std::string str(void) const {return m_sampleString;};
   Sample sample(void) const {return m_sample;};
   
   static Sample GetSampleEnum(const std::string sample){
      if(sample.find("nominal") != std::string::npos){
         return NOMINAL;
      } else if(sample.find("btagsfup") != std::string::npos){
         return BTAGSFUP;
      } else if(sample.find("btagsfdown") != std::string::npos){
         return BTAGSFDOWN;
      } else if(sample.find("ctagsfup") != std::string::npos){
         return CTAGSFUP;
      } else if(sample.find("ctagsfdown") != std::string::npos){
         return CTAGSFDOWN;
      } else if(sample.find("mistagsfup") != std::string::npos){
         return MISTAGSFUP;
      } else if(sample.find("mistagsfdown") != std::string::npos){
         return MISTAGSFDOWN;
      } else if(sample.find("eeru") != std::string::npos){
         return EERU;
      } else if(sample.find("eerd") != std::string::npos){
         return EERD;
      } else if(sample.find("eesu") != std::string::npos){
         return EESU;
      } else if(sample.find("eesd") != std::string::npos){
         return EESD;
      } else if(sample.find("jeff") != std::string::npos){
         return JEFF;
      } else if(sample.find("jer") != std::string::npos){
         return JER;
      } else if(sample.find("loose") != std::string::npos){
         return LOOSE;
      } else if(sample.find("muidu") != std::string::npos){
         return MUIDU;
      } else if(sample.find("muidd") != std::string::npos){
         return MUIDD;
      } else if(sample.find("musc") != std::string::npos){
         return MUSC;
      } else if(sample.find("mumsu") != std::string::npos){
         return MUMSU;
      } else if(sample.find("mumsd") != std::string::npos){
         return MUMSD;
      } else if(sample.find("lep_id_sfup") != std::string::npos){
         return LEP_ID_SFUP;
      } else if(sample.find("lep_id_sfdown") != std::string::npos){
         return LEP_ID_SFDOWN;
      } else if(sample.find("lep_reco_sfup") != std::string::npos){
         return LEP_RECO_SFUP;
      } else if(sample.find("lep_reco_sfdown") != std::string::npos){
         return LEP_RECO_SFDOWN;
      } else if(sample.find("lep_trig_sfup") != std::string::npos){
         return LEP_TRIG_SFUP;
      } else if(sample.find("lep_trig_sfdown") != std::string::npos){
         return LEP_TRIG_SFDOWN;
      } else if(sample.find("wjets_iqopt3") != std::string::npos){
         return WJETS_IQOPT3;
      } else if(sample.find("wjets_ptjmin10") != std::string::npos){
         return WJETS_PTJMIN10;
      } else if(sample.find("wjets_bb4_up") != std::string::npos){
         return WJETS_BB4_UP;
      } else if(sample.find("wjets_bb4_down") != std::string::npos){
         return WJETS_BB4_DOWN;
      } else if(sample.find("wjets_bb5_up") != std::string::npos){
         return WJETS_BB5_UP;
      } else if(sample.find("wjets_bb5_down") != std::string::npos){
         return WJETS_BB5_DOWN;
      } else if(sample.find("wjets_bbccc_up") != std::string::npos){
         return WJETS_BBCCC_UP;
      } else if(sample.find("wjets_bbccc_down") != std::string::npos){
         return WJETS_BBCCC_DOWN;
      } else if(sample.find("wjets_bbcc_up") != std::string::npos){
         return WJETS_BBCC_UP;
      } else if(sample.find("wjets_bbcc_down") != std::string::npos){
         return WJETS_BBCC_DOWN;
      } else if(sample.find("wjets_c4_up") != std::string::npos){
         return WJETS_C4_UP;
      } else if(sample.find("wjets_c4_down") != std::string::npos){
         return WJETS_C4_DOWN;
      } else if(sample.find("wjets_c5_up") != std::string::npos){
         return WJETS_C5_UP;
      } else if(sample.find("wjets_c5_down") != std::string::npos){
         return WJETS_C5_DOWN;
      } else if(sample.find("wjets_ca_up") != std::string::npos){
         return WJETS_CA_UP;
      } else if(sample.find("wjets_ca_down") != std::string::npos){
         return WJETS_CA_DOWN;
      } else if(sample.find("IFsrPlus") != std::string::npos){
         return IFSRPLUS;
      } else if(sample.find("IFsrMinus") != std::string::npos){
         return IFSRMINUS;
      } else if(sample.find("FsrPlus") != std::string::npos){
         return FSRPLUS;
      } else if(sample.find("FsrMinus") != std::string::npos){
         return FSRMINUS;
      } else if(sample.find("IsrPlus") != std::string::npos){
         return ISRPLUS;
      } else if(sample.find("IsrMinus") != std::string::npos){
         return ISRMINUS;
      } else if(sample.find("AlpgenJimmy") != std::string::npos){
         return ALPGENJIMMY;
      } else if(sample.find("PowHeg_Jimmy") != std::string::npos){
         return POWHEG_JIMMY;
      } else if(sample.find("PowHeg_Pythia") != std::string::npos){
         return POWHEG_PYTHIA;
      } else if(sample.find("qcdsu") != std::string::npos){
         return QCDSU;
      } else if(sample.find("qcdsd") != std::string::npos){
         return QCDSD;
      } else if(sample.find("qcdu") != std::string::npos){
         return QCDU;
      } else if(sample.find("qcdd") != std::string::npos){
         return QCDD;
      } else if(sample.find("unfolding") != std::string::npos){
         return UNFOLDING;
      } else if(sample.find("binbybin") != std::string::npos){
         return BINBYBIN;
      } else if(sample.find("migrationToys") != std::string::npos){
         return MIGRATIONTOYS;
      } else if(sample.find("PDF") != std::string::npos){
         return PDF;
      } else if(sample.find("hadronization") != std::string::npos){
         return HADRONIZATION;
      } else if(sample.find("LUMI") != std::string::npos){
         return LUMI;
      } else if(sample.find("mc_generator") != std::string::npos){
         return MC_GENERATOR;
      } else if(sample.find("BJesUnc-up") != std::string::npos){
         return BJESUNC_UP;
      } else if(sample.find("BJesUnc-down") != std::string::npos){
         return BJESUNC_DOWN;
      } else if(sample.find("closeby-up") != std::string::npos){
         return CLOSEBY_UP;
      } else if(sample.find("closeby-down") != std::string::npos){
         return CLOSEBY_DOWN;
      } else if(sample.find("EffectiveNP-DET1-up") != std::string::npos){
         return EFFECTIVENP_DET1_UP;
      } else if(sample.find("EffectiveNP-DET1-down") != std::string::npos){
         return EFFECTIVENP_DET1_DOWN;
      } else if(sample.find("EffectiveNP-DET2-up") != std::string::npos){
         return EFFECTIVENP_DET2_UP;
      } else if(sample.find("EffectiveNP-DET2-down") != std::string::npos){
         return EFFECTIVENP_DET2_DOWN;
      } else if(sample.find("EffectiveNP-MIXED1-up") != std::string::npos){
         return EFFECTIVENP_MIXED1_UP;
      } else if(sample.find("EffectiveNP-MIXED1-down") != std::string::npos){
         return EFFECTIVENP_MIXED1_DOWN;
      } else if(sample.find("EffectiveNP-MIXED2-up") != std::string::npos){
         return EFFECTIVENP_MIXED2_UP;
      } else if(sample.find("EffectiveNP-MIXED2-down") != std::string::npos){
         return EFFECTIVENP_MIXED2_DOWN;
      } else if(sample.find("EffectiveNP-MODEL1-up") != std::string::npos){
         return EFFECTIVENP_MODEL1_UP;
      } else if(sample.find("EffectiveNP-MODEL1-down") != std::string::npos){
         return EFFECTIVENP_MODEL1_DOWN;
      } else if(sample.find("EffectiveNP-MODEL2-up") != std::string::npos){
         return EFFECTIVENP_MODEL2_UP;
      } else if(sample.find("EffectiveNP-MODEL2-down") != std::string::npos){
         return EFFECTIVENP_MODEL2_DOWN;
      } else if(sample.find("EffectiveNP-MODEL3-up") != std::string::npos){
         return EFFECTIVENP_MODEL3_UP;
      } else if(sample.find("EffectiveNP-MODEL3-down") != std::string::npos){
         return EFFECTIVENP_MODEL3_DOWN;
      } else if(sample.find("EffectiveNP-MODEL4-up") != std::string::npos){
         return EFFECTIVENP_MODEL4_UP;
      } else if(sample.find("EffectiveNP-MODEL4-down") != std::string::npos){
         return EFFECTIVENP_MODEL4_DOWN;
      } else if(sample.find("EffectiveNP-STAT1-up") != std::string::npos){
         return EFFECTIVENP_STAT1_UP;
      } else if(sample.find("EffectiveNP-STAT1-down") != std::string::npos){
         return EFFECTIVENP_STAT1_DOWN;
      } else if(sample.find("EffectiveNP-STAT2-up") != std::string::npos){
         return EFFECTIVENP_STAT2_UP;
      } else if(sample.find("EffectiveNP-STAT2-down") != std::string::npos){
         return EFFECTIVENP_STAT2_DOWN;
      } else if(sample.find("EffectiveNP-STAT3-up") != std::string::npos){
         return EFFECTIVENP_STAT3_UP;
      } else if(sample.find("EffectiveNP-STAT3-down") != std::string::npos){
         return EFFECTIVENP_STAT3_DOWN;
      } else if(sample.find("EtaIntercalibration-Theory-up") != std::string::npos){
         return ETAINTERCALIBRATION_THEORY_UP;
      } else if(sample.find("EtaIntercalibration-Theory-down") != std::string::npos){
         return ETAINTERCALIBRATION_THEORY_DOWN;
      } else if(sample.find("EtaIntercalibration-TotalStat-up") != std::string::npos){
         return ETAINTERCALIBRATION_TOTALSTAT_UP;
      } else if(sample.find("EtaIntercalibration-TotalStat-down") != std::string::npos){
         return ETAINTERCALIBRATION_TOTALSTAT_DOWN;
      } else if(sample.find("flavor-comp-up") != std::string::npos){
         return FLAVOR_COMP_UP;
      } else if(sample.find("flavor-comp-down") != std::string::npos){
         return FLAVOR_COMP_DOWN;
      } else if(sample.find("flavor-response-up") != std::string::npos){
         return FLAVOR_RESPONSE_UP;
      } else if(sample.find("flavor-response-down") != std::string::npos){
         return FLAVOR_RESPONSE_DOWN;
      } else if(sample.find("Pileup-OffsetMu-up") != std::string::npos){
         return PILEUP_OFFSETMU_UP;
      } else if(sample.find("Pileup-OffsetMu-down") != std::string::npos){
         return PILEUP_OFFSETMU_DOWN;
      } else if(sample.find("Pileup-OffsetNPV-up") != std::string::npos){
         return PILEUP_OFFSETNPV_UP;
      } else if(sample.find("Pileup-OffsetNPV-down") != std::string::npos){
         return PILEUP_OFFSETNPV_DOWN;
      } else if(sample.find("RelativeNonClosure-MC11b-up") != std::string::npos){
         return RELATIVENONCLOSURE_MC11B_UP;
      } else if(sample.find("RelativeNonClosure-MC11b-down") != std::string::npos){
         return RELATIVENONCLOSURE_MC11B_DOWN;
      } else if(sample.find("SingleParticle-HighPt-up") != std::string::npos){
         return SINGLEPARTICLE_HIGHPT_UP;
      } else if(sample.find("SingleParticle-HighPt-down") != std::string::npos){
         return SINGLEPARTICLE_HIGHPT_DOWN;
      } else if(sample.find("celloutu") != std::string::npos){
         return CELLOUTU;
      } else if(sample.find("celloutd") != std::string::npos){
         return CELLOUTD;
      } else if(sample.find("pileupu") != std::string::npos){
         return PILEUPU;
      } else if(sample.find("pileupd") != std::string::npos){
         return PILEUPD;
      } else if(sample.find("bkgd_jes_up") != std::string::npos){
         return BKGD_JES_UP;
      } else if(sample.find("bkgd_jes_down") != std::string::npos){
         return BKGD_JES_DOWN;
      } else if(sample.find("jesu") != std::string::npos){
         return JESU;
      } else if(sample.find("jesd") != std::string::npos){
         return JESD;
      } else{
         return NUM_OF_SAMPLES;
      }
   };
   
   static std::string GetSampleString(const Sample sample){
      switch(sample){
      case NOMINAL:
         return "nominal";
      case BTAGSFUP:
         return "btagsfup";
      case BTAGSFDOWN:
         return "btagsfdown";
      case CTAGSFUP:
         return "ctagsfup";
      case CTAGSFDOWN:
         return "ctagsfdown";
      case MISTAGSFUP:
         return "mistagsfup";
      case MISTAGSFDOWN:
         return "mistagsfdown";
      case EERU:
         return "eeru";
      case EERD:
         return "eerd";
      case EESU:
         return "eesu";
      case EESD:
         return "eesd";
      case JEFF:
         return "jeff";
      case JER:
         return "jer";
      case LOOSE:
         return "loose";
      case MUIDU:
         return "muidu";
      case MUIDD:
         return "muidd";
      case MUSC:
         return "musc";
      case MUMSU:
         return "mumsu";
      case MUMSD:
         return "mumsd";
      case LEP_ID_SFUP:
         return "lep_id_sfup";
      case LEP_ID_SFDOWN:
         return "lep_id_sfdown";
      case LEP_RECO_SFUP:
         return "lep_reco_sfup";
      case LEP_RECO_SFDOWN:
         return "lep_reco_sfdown";
      case LEP_TRIG_SFUP:
         return "lep_trig_sfup";
      case LEP_TRIG_SFDOWN:
         return "lep_trig_sfdown";
      case WJETS_IQOPT3:
         return "wjets_iqopt3";
      case WJETS_PTJMIN10:
         return "wjets_ptjmin10";
      case WJETS_BB4_UP:
         return "wjets_bb4_up";
      case WJETS_BB4_DOWN:
         return "wjets_bb4_down";
      case WJETS_BB5_UP:
         return "wjets_bb5_up";
      case WJETS_BB5_DOWN:
         return "wjets_bb5_down";
      case WJETS_BBCCC_UP:
         return "wjets_bbccc_up";
      case WJETS_BBCCC_DOWN:
         return "wjets_bbccc_down";
      case WJETS_BBCC_UP:
         return "wjets_bbcc_up";
      case WJETS_BBCC_DOWN:
         return "wjets_bbcc_down";
      case WJETS_C4_UP:
         return "wjets_c4_up";
      case WJETS_C4_DOWN:
         return "wjets_c4_down";
      case WJETS_C5_UP:
         return "wjets_c5_up";
      case WJETS_C5_DOWN:
         return "wjets_c5_down";
      case WJETS_CA_UP:
         return "wjets_ca_up";
      case WJETS_CA_DOWN:
         return "wjets_ca_down";
      case IFSRPLUS:
         return "IFsrPlus";
      case IFSRMINUS:
         return "IFsrMinus";
      case FSRPLUS:
         return "FsrPlus";
      case FSRMINUS:
         return "FsrMinus";
      case ISRPLUS:
         return "IsrPlus";
      case ISRMINUS:
         return "IsrMinus";
      case ALPGENJIMMY:
         return "AlpgenJimmy";
      case POWHEG_JIMMY:
         return "PowHeg_Jimmy";
      case POWHEG_PYTHIA:
         return "PowHeg_Pythia";
      case QCDSU:
         return "qcdsu";
      case QCDSD:
         return "qcdsd";
      case QCDU:
         return "qcdu";
      case QCDD:
         return "qcdd";
      case UNFOLDING:
         return "unfolding";
      case BINBYBIN:
         return "binbybin";
      case MIGRATIONTOYS:
         return "migrationToys";
      case PDF:
         return "PDF";
      case HADRONIZATION:
         return "hadronization";
      case LUMI:
         return "LUMI";
      case MC_GENERATOR:
         return "mc_generator";
      case BJESUNC_UP:
         return "BJesUnc-up";
      case BJESUNC_DOWN:
         return "BJesUnc-down";
      case CLOSEBY_UP:
         return "closeby-up";
      case CLOSEBY_DOWN:
         return "closeby-down";
      case EFFECTIVENP_DET1_UP:
         return "EffectiveNP-DET1-up";
      case EFFECTIVENP_DET1_DOWN:
         return "EffectiveNP-DET1-down";
      case EFFECTIVENP_DET2_UP:
         return "EffectiveNP-DET2-up";
      case EFFECTIVENP_DET2_DOWN:
         return "EffectiveNP-DET2-down";
      case EFFECTIVENP_MIXED1_UP:
         return "EffectiveNP-MIXED1-up";
      case EFFECTIVENP_MIXED1_DOWN:
         return "EffectiveNP-MIXED1-down";
      case EFFECTIVENP_MIXED2_UP:
         return "EffectiveNP-MIXED2-up";
      case EFFECTIVENP_MIXED2_DOWN:
         return "EffectiveNP-MIXED2-down";
      case EFFECTIVENP_MODEL1_UP:
         return "EffectiveNP-MODEL1-up";
      case EFFECTIVENP_MODEL1_DOWN:
         return "EffectiveNP-MODEL1-down";
      case EFFECTIVENP_MODEL2_UP:
         return "EffectiveNP-MODEL2-up";
      case EFFECTIVENP_MODEL2_DOWN:
         return "EffectiveNP-MODEL2-down";
      case EFFECTIVENP_MODEL3_UP:
         return "EffectiveNP-MODEL3-up";
      case EFFECTIVENP_MODEL3_DOWN:
         return "EffectiveNP-MODEL3-down";
      case EFFECTIVENP_MODEL4_UP:
         return "EffectiveNP-MODEL4-up";
      case EFFECTIVENP_MODEL4_DOWN:
         return "EffectiveNP-MODEL4-down";
      case EFFECTIVENP_STAT1_UP:
         return "EffectiveNP-STAT1-up";
      case EFFECTIVENP_STAT1_DOWN:
         return "EffectiveNP-STAT1-down";
      case EFFECTIVENP_STAT2_UP:
         return "EffectiveNP-STAT2-up";
      case EFFECTIVENP_STAT2_DOWN:
         return "EffectiveNP-STAT2-down";
      case EFFECTIVENP_STAT3_UP:
         return "EffectiveNP-STAT3-up";
      case EFFECTIVENP_STAT3_DOWN:
         return "EffectiveNP-STAT3-down";
      case ETAINTERCALIBRATION_THEORY_UP:
         return "EtaIntercalibration-Theory-up";
      case ETAINTERCALIBRATION_THEORY_DOWN:
         return "EtaIntercalibration-Theory-down";
      case ETAINTERCALIBRATION_TOTALSTAT_UP:
         return "EtaIntercalibration-TotalStat-up";
      case ETAINTERCALIBRATION_TOTALSTAT_DOWN:
         return "EtaIntercalibration-TotalStat-down";
      case FLAVOR_COMP_UP:
         return "flavor-comp-up";
      case FLAVOR_COMP_DOWN:
         return "flavor-comp-down";
      case FLAVOR_RESPONSE_UP:
         return "flavor-response-up";
      case FLAVOR_RESPONSE_DOWN:
         return "flavor-response-down";
      case PILEUP_OFFSETMU_UP:
         return "Pileup-OffsetMu-up";
      case PILEUP_OFFSETMU_DOWN:
         return "Pileup-OffsetMu-down";
      case PILEUP_OFFSETNPV_UP:
         return "Pileup-OffsetNPV-up";
      case PILEUP_OFFSETNPV_DOWN:
         return "Pileup-OffsetNPV-down";
      case RELATIVENONCLOSURE_MC11B_UP:
         return "RelativeNonClosure-MC11b-up";
      case RELATIVENONCLOSURE_MC11B_DOWN:
         return "RelativeNonClosure-MC11b-down";
      case SINGLEPARTICLE_HIGHPT_UP:
         return "SingleParticle-HighPt-up";
      case SINGLEPARTICLE_HIGHPT_DOWN:
         return "SingleParticle-HighPt-down";
      case CELLOUTU:
         return "celloutu";
      case CELLOUTD:
         return "celloutd";
      case PILEUPU:
         return "pileupu";
      case PILEUPD:
         return "pileupd";
      case BKGD_JES_UP:
         return "bkgd_jes_up";
      case BKGD_JES_DOWN:
         return "bkgd_jes_down";
      case JESU:
         return "jesu";
      case JESD:
         return "jesd";
      default:
         return "";
      }
   };
   
   static std::string GetSampleBaseString(const std::string& sample){return GetSampleBaseString(GetSampleEnum(sample));};
   static std::string GetSampleBaseString(const SystematicSample& sample){return GetSampleBaseString(sample.sample());};
   static std::string GetSampleBaseString(const Sample& sample){
      switch(sample){
      case NOMINAL:
         return "nominal";
      case BTAGSFUP:
         return "btagsf";
      case BTAGSFDOWN:
         return "btagsf";
      case CTAGSFUP:
         return "ctagsf";
      case CTAGSFDOWN:
         return "ctagsf";
      case MISTAGSFUP:
         return "mistagsf";
      case MISTAGSFDOWN:
         return "mistagsf";
      case EERU:
         return "eer";
      case EERD:
         return "eer";
      case EESU:
         return "ees";
      case EESD:
         return "ees";
      case JEFF:
         return "jeff";
      case JER:
         return "jer";
      case LOOSE:
         return "loose";
      case MUIDU:
         return "muid";
      case MUIDD:
         return "muid";
      case MUSC:
         return "musc";
      case MUMSU:
         return "mums";
      case MUMSD:
         return "mums";
      case LEP_ID_SFUP:
         return "lep_id_sf";
      case LEP_ID_SFDOWN:
         return "lep_id_sf";
      case LEP_RECO_SFUP:
         return "lep_reco_sf";
      case LEP_RECO_SFDOWN:
         return "lep_reco_sf";
      case LEP_TRIG_SFUP:
         return "lep_trig_sf";
      case LEP_TRIG_SFDOWN:
         return "lep_trig_sf";
      case WJETS_IQOPT3:
         return "wjets_iqopt3";
      case WJETS_PTJMIN10:
         return "wjets_ptjmin10";
      case WJETS_BB4_UP:
         return "wjets_bb4";
      case WJETS_BB4_DOWN:
         return "wjets_bb4";
      case WJETS_BB5_UP:
         return "wjets_bb5";
      case WJETS_BB5_DOWN:
         return "wjets_bb5";
      case WJETS_BBCCC_UP:
         return "wjets_bbccc";
      case WJETS_BBCCC_DOWN:
         return "wjets_bbccc";
      case WJETS_BBCC_UP:
         return "wjets_bbcc";
      case WJETS_BBCC_DOWN:
         return "wjets_bbcc";
      case WJETS_C4_UP:
         return "wjets_c4";
      case WJETS_C4_DOWN:
         return "wjets_c4";
      case WJETS_C5_UP:
         return "wjets_c5";
      case WJETS_C5_DOWN:
         return "wjets_c5";
      case WJETS_CA_UP:
         return "wjets_ca";
      case WJETS_CA_DOWN:
         return "wjets_ca";
      case IFSRPLUS:
         return "ifsr";
      case IFSRMINUS:
         return "ifsr";
      case FSRPLUS:
         return "fsr";
      case FSRMINUS:
         return "fsr";
      case ISRPLUS:
         return "isr";
      case ISRMINUS:
         return "isr";
      case ALPGENJIMMY:
         return "alpgenjimmy";
      case POWHEG_JIMMY:
         return "powheg";
      case POWHEG_PYTHIA:
         return "powheg";
      case QCDSU:
         return "qcds";
      case QCDSD:
         return "qcds";
      case QCDU:
         return "qcd";
      case QCDD:
         return "qcd";
      case UNFOLDING:
         return "unfolding";
      case BINBYBIN:
         return "binbybin";
      case MIGRATIONTOYS:
         return "migrationtoys";
      case PDF:
         return "pdf";
      case HADRONIZATION:
         return "hadronization";
      case LUMI:
         return "lumi";
      case MC_GENERATOR:
         return "mc_generator";
      case BJESUNC_UP:
         return "jesc_bjesunc";
      case BJESUNC_DOWN:
         return "jesc_bjesunc";
      case CLOSEBY_UP:
         return "jesc_closeby";
      case CLOSEBY_DOWN:
         return "jesc_closeby";
      case EFFECTIVENP_DET1_UP:
         return "jesc_effectivenp-det1";
      case EFFECTIVENP_DET1_DOWN:
         return "jesc_effectivenp-det1";
      case EFFECTIVENP_DET2_UP:
         return "jesc_effectivenp-det2";
      case EFFECTIVENP_DET2_DOWN:
         return "jesc_effectivenp-det2";
      case EFFECTIVENP_MIXED1_UP:
         return "jesc_effectivenp-mixed1";
      case EFFECTIVENP_MIXED1_DOWN:
         return "jesc_effectivenp-mixed1";
      case EFFECTIVENP_MIXED2_UP:
         return "jesc_effectivenp-mixed2";
      case EFFECTIVENP_MIXED2_DOWN:
         return "jesc_effectivenp-mixed2";
      case EFFECTIVENP_MODEL1_UP:
         return "jesc_effectivenp-model1";
      case EFFECTIVENP_MODEL1_DOWN:
         return "jesc_effectivenp-model1";
      case EFFECTIVENP_MODEL2_UP:
         return "jesc_effectivenp-model2";
      case EFFECTIVENP_MODEL2_DOWN:
         return "jesc_effectivenp-model2";
      case EFFECTIVENP_MODEL3_UP:
         return "jesc_effectivenp-model3";
      case EFFECTIVENP_MODEL3_DOWN:
         return "jesc_effectivenp-model3";
      case EFFECTIVENP_MODEL4_UP:
         return "jesc_effectivenp-model4";
      case EFFECTIVENP_MODEL4_DOWN:
         return "jesc_effectivenp-model4";
      case EFFECTIVENP_STAT1_UP:
         return "jesc_effectivenp-stat1";
      case EFFECTIVENP_STAT1_DOWN:
         return "jesc_effectivenp-stat1";
      case EFFECTIVENP_STAT2_UP:
         return "jesc_effectivenp-stat2";
      case EFFECTIVENP_STAT2_DOWN:
         return "jesc_effectivenp-stat2";
      case EFFECTIVENP_STAT3_UP:
         return "jesc_effectivenp-stat3";
      case EFFECTIVENP_STAT3_DOWN:
         return "jesc_effectivenp-stat3";
      case ETAINTERCALIBRATION_THEORY_UP:
         return "jesc_etaintercalibration-theory";
      case ETAINTERCALIBRATION_THEORY_DOWN:
         return "jesc_etaintercalibration-theory";
      case ETAINTERCALIBRATION_TOTALSTAT_UP:
         return "jesc_etaintercalibration-totalstat";
      case ETAINTERCALIBRATION_TOTALSTAT_DOWN:
         return "jesc_etaintercalibration-totalstat";
      case FLAVOR_COMP_UP:
         return "jesc_flavor-comp";
      case FLAVOR_COMP_DOWN:
         return "jesc_flavor-comp";
      case FLAVOR_RESPONSE_UP:
         return "jesc_flavor-response";
      case FLAVOR_RESPONSE_DOWN:
         return "jesc_flavor-response";
      case PILEUP_OFFSETMU_UP:
         return "jesc_pileup-offsetmu";
      case PILEUP_OFFSETMU_DOWN:
         return "jesc_pileup-offsetmu";
      case PILEUP_OFFSETNPV_UP:
         return "jesc_pileup-offsetnpv";
      case PILEUP_OFFSETNPV_DOWN:
         return "jesc_pileup-offsetnpv";
      case RELATIVENONCLOSURE_MC11B_UP:
         return "jesc_relativenonclosure-mc11b";
      case RELATIVENONCLOSURE_MC11B_DOWN:
         return "jesc_relativenonclosure-mc11b";
      case SINGLEPARTICLE_HIGHPT_UP:
         return "jesc_singleparticle-highpt";
      case SINGLEPARTICLE_HIGHPT_DOWN:
         return "jesc_singleparticle-highpt";
      case CELLOUTU:
         return "cellout";
      case CELLOUTD:
         return "cellout";
      case PILEUPU:
         return "pileup";
      case PILEUPD:
         return "pileup";
      case BKGD_JES_UP:
         return "bkgd_jes";
      case BKGD_JES_DOWN:
         return "bkgd_jes";
      case JESU:
         return "jes";
      case JESD:
         return "jes";
      default:
         return "";
      }
   };
   
   // converts output from GetSampleBaseString to a pretty string for tables
   static std::string GetSamplePrettyBaseString(const SystematicSample& sample){
      return GetSamplePrettyBaseString(sample.sample());
   };
   static std::string GetSamplePrettyBaseString(const Sample& sample){return GetSamplePrettyBaseString(GetSampleBaseString(sample));};
   static std::string GetSamplePrettyBaseString(const std::string& sample){
      if(sample.find("nominal") != std::string::npos){
         return "Nominal";
      } else if(sample.find("btagsf") != std::string::npos){
         return "b-tag SF";
      } else if(sample.find("ctagsf") != std::string::npos){
         return "c-tag SF";
      } else if(sample.find("mistagsf") != std::string::npos){
         return "miss-tag SF";
      } else if(sample.find("eer") != std::string::npos){
         return "$e$ Energy Res.";
      } else if(sample.find("ees") != std::string::npos){
         return "$e$ Energy Scale";
      } else if(sample.find("jeff") != std::string::npos){
         return "Jet ID Eff.";
      } else if(sample.find("jer") != std::string::npos){
         return "Jet Energy Res.";
      } else if(sample.find("loose") != std::string::npos){
         return "Loose";
      } else if(sample.find("muid") != std::string::npos){
         return "$\\mu$ ID Eff.";
      } else if(sample.find("musc") != std::string::npos){
         return "$\\mu$ Momentum Rescaling";
      } else if(sample.find("mums") != std::string::npos){
         return "$\\mu$ Momentum Scale";
      } else if(sample.find("lep_id_sf") != std::string::npos){
         return "$l$ ID SF";
      } else if(sample.find("lep_reco_sf") != std::string::npos){
         return "$l$ Reco. SF";
      } else if(sample.find("lep_trig_sf") != std::string::npos){
         return "$l$ Trigger SF";
      } else if(sample.find("wjets_iqopt3") != std::string::npos){
         return "W+jets (iqopt3)";
      } else if(sample.find("wjets_ptjmin10") != std::string::npos){
         return "W+jets (ptjmin10)";
      } else if(sample.find("wjets_bb4") != std::string::npos){
         return "W+Jets bb4";
      } else if(sample.find("wjets_bb5") != std::string::npos){
         return "W+Jets bb5";
      } else if(sample.find("wjets_bbccc") != std::string::npos){
         return "W+Jets bbccc";
      } else if(sample.find("wjets_bbcc") != std::string::npos){
         return "W+Jets bbcc";
      } else if(sample.find("wjets_c4") != std::string::npos){
         return "W+Jets c4";
      } else if(sample.find("wjets_c5") != std::string::npos){
         return "W+Jets c5";
      } else if(sample.find("wjets_ca") != std::string::npos){
         return "W+Jets ca";
      } else if(sample.find("ifsr") != std::string::npos){
         return "IFSR";
      } else if(sample.find("fsr") != std::string::npos){
         return "FSR";
      } else if(sample.find("isr") != std::string::npos){
         return "ISR";
      } else if(sample.find("alpgenjimmy") != std::string::npos){
         return "Hard Process";
      } else if(sample.find("powheg") != std::string::npos){
         return "Parton Shower";
      } else if(sample.find("qcds") != std::string::npos){
         return "QCD Shape";
      } else if(sample.find("qcd") != std::string::npos){
         return "QCD";
      } else if(sample.find("unfolding") != std::string::npos){
         return "Unfolding Method";
      } else if(sample.find("binbybin") != std::string::npos){
         return "Unfolding Method";
      } else if(sample.find("migrationtoys") != std::string::npos){
         return "MC Stat.";
      } else if(sample.find("pdf") != std::string::npos){
         return "PDF";
      } else if(sample.find("hadronization") != std::string::npos){
         return "Fragmentation";
      } else if(sample.find("lumi") != std::string::npos){
         return "Luminosity";
      } else if(sample.find("mc_generator") != std::string::npos){
         return "MC Generator";
      } else if(sample.find("jesc_bjesunc") != std::string::npos){
         return "BJesUnc";
      } else if(sample.find("jesc_closeby") != std::string::npos){
         return "JesCloseby";
      } else if(sample.find("jesc_effectivenp-det1") != std::string::npos){
         return "JesEffNpDet1";
      } else if(sample.find("jesc_effectivenp-det2") != std::string::npos){
         return "JesEffNpDet2";
      } else if(sample.find("jesc_effectivenp-mixed1") != std::string::npos){
         return "JesEffNpMixed1";
      } else if(sample.find("jesc_effectivenp-mixed2") != std::string::npos){
         return "JesEffNpMixed2";
      } else if(sample.find("jesc_effectivenp-model1") != std::string::npos){
         return "JesEffNpModel1";
      } else if(sample.find("jesc_effectivenp-model2") != std::string::npos){
         return "JesEffNpModel2";
      } else if(sample.find("jesc_effectivenp-model3") != std::string::npos){
         return "JesEffNpModel3";
      } else if(sample.find("jesc_effectivenp-model4") != std::string::npos){
         return "JesEffNpModel4";
      } else if(sample.find("jesc_effectivenp-stat1") != std::string::npos){
         return "JesEffNpStat1";
      } else if(sample.find("jesc_effectivenp-stat2") != std::string::npos){
         return "JesEffNpStat2";
      } else if(sample.find("jesc_effectivenp-stat3") != std::string::npos){
         return "JesEffNpStat3";
      } else if(sample.find("jesc_etaintercalibration-theory") != std::string::npos){
         return "JesEtaIntercalibTheory";
      } else if(sample.find("jesc_etaintercalibration-totalstat") != std::string::npos){
         return "JesEtaCalibTotalStat";
      } else if(sample.find("jesc_flavor-comp") != std::string::npos){
         return "JesFlavorComp";
      } else if(sample.find("jesc_flavor-response") != std::string::npos){
         return "JesFlavorResponse";
      } else if(sample.find("jesc_pileup-offsetmu") != std::string::npos){
         return "JesPileupOffsetMu";
      } else if(sample.find("jesc_pileup-offsetnpv") != std::string::npos){
         return "JesPileupOffsetNpv";
      } else if(sample.find("jesc_relativenonclosure-mc11b") != std::string::npos){
         return "JesRelNonClosure";
      } else if(sample.find("jesc_singleparticle-highpt") != std::string::npos){
         return "JesSinglePart";
      } else if(sample.find("cellout") != std::string::npos){
         return "$E_{T}^{miss}$ cell-out";
      } else if(sample.find("pileup") != std::string::npos){
         return "$E_{T}^{miss}$ pile-up";
      } else if(sample.find("bkgd_jes") != std::string::npos){
         return "Bkgd JES";
      } else if(sample.find("jes") != std::string::npos){
         return "Jet Energy Scale";
      }else{
         return sample;
      }
   };
   
   static bool GetUp(const std::string systematic){GetUp(GetSampleEnum(systematic));};
   static bool GetUp(const Sample sample){
      switch(sample){
      case NOMINAL:
         return false;
      case BTAGSFUP:
         return true;
      case BTAGSFDOWN:
         return false;
      case CTAGSFUP:
         return true;
      case CTAGSFDOWN:
         return false;
      case MISTAGSFUP:
         return true;
      case MISTAGSFDOWN:
         return false;
      case EERU:
         return true;
      case EERD:
         return false;
      case EESU:
         return true;
      case EESD:
         return false;
      case JEFF:
         return false;
      case JER:
         return false;
      case LOOSE:
         return false;
      case MUIDU:
         return true;
      case MUIDD:
         return false;
      case MUSC:
         return false;
      case MUMSU:
         return true;
      case MUMSD:
         return false;
      case LEP_ID_SFUP:
         return true;
      case LEP_ID_SFDOWN:
         return false;
      case LEP_RECO_SFUP:
         return true;
      case LEP_RECO_SFDOWN:
         return false;
      case LEP_TRIG_SFUP:
         return true;
      case LEP_TRIG_SFDOWN:
         return false;
      case WJETS_IQOPT3:
         return false;
      case WJETS_PTJMIN10:
         return false;
      case WJETS_BB4_UP:
         return true;
      case WJETS_BB4_DOWN:
         return false;
      case WJETS_BB5_UP:
         return true;
      case WJETS_BB5_DOWN:
         return false;
      case WJETS_BBCCC_UP:
         return true;
      case WJETS_BBCCC_DOWN:
         return false;
      case WJETS_BBCC_UP:
         return true;
      case WJETS_BBCC_DOWN:
         return false;
      case WJETS_C4_UP:
         return true;
      case WJETS_C4_DOWN:
         return false;
      case WJETS_C5_UP:
         return true;
      case WJETS_C5_DOWN:
         return false;
      case WJETS_CA_UP:
         return true;
      case WJETS_CA_DOWN:
         return false;
      case IFSRPLUS:
         return true;
      case IFSRMINUS:
         return false;
      case FSRPLUS:
         return true;
      case FSRMINUS:
         return false;
      case ISRPLUS:
         return true;
      case ISRMINUS:
         return false;
      case ALPGENJIMMY:
         return false;
      case POWHEG_JIMMY:
         return true;
      case POWHEG_PYTHIA:
         return false;
      case QCDSU:
         return true;
      case QCDSD:
         return false;
      case QCDU:
         return true;
      case QCDD:
         return false;
      case UNFOLDING:
         return false;
      case BINBYBIN:
         return false;
      case MIGRATIONTOYS:
         return false;
      case PDF:
         return false;
      case HADRONIZATION:
         return false;
      case LUMI:
         return false;
      case MC_GENERATOR:
         return false;
      case BJESUNC_UP:
         return true;
      case BJESUNC_DOWN:
         return false;
      case CLOSEBY_UP:
         return true;
      case CLOSEBY_DOWN:
         return false;
      case EFFECTIVENP_DET1_UP:
         return true;
      case EFFECTIVENP_DET1_DOWN:
         return false;
      case EFFECTIVENP_DET2_UP:
         return true;
      case EFFECTIVENP_DET2_DOWN:
         return false;
      case EFFECTIVENP_MIXED1_UP:
         return true;
      case EFFECTIVENP_MIXED1_DOWN:
         return false;
      case EFFECTIVENP_MIXED2_UP:
         return true;
      case EFFECTIVENP_MIXED2_DOWN:
         return false;
      case EFFECTIVENP_MODEL1_UP:
         return true;
      case EFFECTIVENP_MODEL1_DOWN:
         return false;
      case EFFECTIVENP_MODEL2_UP:
         return true;
      case EFFECTIVENP_MODEL2_DOWN:
         return false;
      case EFFECTIVENP_MODEL3_UP:
         return true;
      case EFFECTIVENP_MODEL3_DOWN:
         return false;
      case EFFECTIVENP_MODEL4_UP:
         return true;
      case EFFECTIVENP_MODEL4_DOWN:
         return false;
      case EFFECTIVENP_STAT1_UP:
         return true;
      case EFFECTIVENP_STAT1_DOWN:
         return false;
      case EFFECTIVENP_STAT2_UP:
         return true;
      case EFFECTIVENP_STAT2_DOWN:
         return false;
      case EFFECTIVENP_STAT3_UP:
         return true;
      case EFFECTIVENP_STAT3_DOWN:
         return false;
      case ETAINTERCALIBRATION_THEORY_UP:
         return true;
      case ETAINTERCALIBRATION_THEORY_DOWN:
         return false;
      case ETAINTERCALIBRATION_TOTALSTAT_UP:
         return true;
      case ETAINTERCALIBRATION_TOTALSTAT_DOWN:
         return false;
      case FLAVOR_COMP_UP:
         return true;
      case FLAVOR_COMP_DOWN:
         return false;
      case FLAVOR_RESPONSE_UP:
         return true;
      case FLAVOR_RESPONSE_DOWN:
         return false;
      case PILEUP_OFFSETMU_UP:
         return true;
      case PILEUP_OFFSETMU_DOWN:
         return false;
      case PILEUP_OFFSETNPV_UP:
         return true;
      case PILEUP_OFFSETNPV_DOWN:
         return false;
      case RELATIVENONCLOSURE_MC11B_UP:
         return true;
      case RELATIVENONCLOSURE_MC11B_DOWN:
         return false;
      case SINGLEPARTICLE_HIGHPT_UP:
         return true;
      case SINGLEPARTICLE_HIGHPT_DOWN:
         return false;
      case CELLOUTU:
         return true;
      case CELLOUTD:
         return false;
      case PILEUPU:
         return true;
      case PILEUPD:
         return false;
      case BKGD_JES_UP:
         return true;
      case BKGD_JES_DOWN:
         return false;
      case JESU:
         return true;
      case JESD:
         return false;
      default:
         return false;
      }
   };
   
   static bool GetDown(const std::string systematic){GetDown(GetSampleEnum(systematic));};
   static bool GetDown(const Sample sample){
      switch(sample){
      case NOMINAL:
         return false;
      case BTAGSFUP:
         return false;
      case BTAGSFDOWN:
         return true;
      case CTAGSFUP:
         return false;
      case CTAGSFDOWN:
         return true;
      case MISTAGSFUP:
         return false;
      case MISTAGSFDOWN:
         return true;
      case EERU:
         return false;
      case EERD:
         return true;
      case EESU:
         return false;
      case EESD:
         return true;
      case JEFF:
         return false;
      case JER:
         return false;
      case LOOSE:
         return false;
      case MUIDU:
         return false;
      case MUIDD:
         return true;
      case MUSC:
         return false;
      case MUMSU:
         return false;
      case MUMSD:
         return true;
      case LEP_ID_SFUP:
         return false;
      case LEP_ID_SFDOWN:
         return true;
      case LEP_RECO_SFUP:
         return false;
      case LEP_RECO_SFDOWN:
         return true;
      case LEP_TRIG_SFUP:
         return false;
      case LEP_TRIG_SFDOWN:
         return true;
      case WJETS_IQOPT3:
         return false;
      case WJETS_PTJMIN10:
         return false;
      case WJETS_BB4_UP:
         return false;
      case WJETS_BB4_DOWN:
         return true;
      case WJETS_BB5_UP:
         return false;
      case WJETS_BB5_DOWN:
         return true;
      case WJETS_BBCCC_UP:
         return false;
      case WJETS_BBCCC_DOWN:
         return true;
      case WJETS_BBCC_UP:
         return false;
      case WJETS_BBCC_DOWN:
         return true;
      case WJETS_C4_UP:
         return false;
      case WJETS_C4_DOWN:
         return true;
      case WJETS_C5_UP:
         return false;
      case WJETS_C5_DOWN:
         return true;
      case WJETS_CA_UP:
         return false;
      case WJETS_CA_DOWN:
         return true;
      case IFSRPLUS:
         return false;
      case IFSRMINUS:
         return true;
      case FSRPLUS:
         return false;
      case FSRMINUS:
         return true;
      case ISRPLUS:
         return false;
      case ISRMINUS:
         return true;
      case ALPGENJIMMY:
         return false;
      case POWHEG_JIMMY:
         return false;
      case POWHEG_PYTHIA:
         return true;
      case QCDSU:
         return false;
      case QCDSD:
         return true;
      case QCDU:
         return false;
      case QCDD:
         return true;
      case UNFOLDING:
         return false;
      case BINBYBIN:
         return false;
      case MIGRATIONTOYS:
         return false;
      case PDF:
         return false;
      case HADRONIZATION:
         return false;
      case LUMI:
         return false;
      case MC_GENERATOR:
         return false;
      case BJESUNC_UP:
         return false;
      case BJESUNC_DOWN:
         return true;
      case CLOSEBY_UP:
         return false;
      case CLOSEBY_DOWN:
         return true;
      case EFFECTIVENP_DET1_UP:
         return false;
      case EFFECTIVENP_DET1_DOWN:
         return true;
      case EFFECTIVENP_DET2_UP:
         return false;
      case EFFECTIVENP_DET2_DOWN:
         return true;
      case EFFECTIVENP_MIXED1_UP:
         return false;
      case EFFECTIVENP_MIXED1_DOWN:
         return true;
      case EFFECTIVENP_MIXED2_UP:
         return false;
      case EFFECTIVENP_MIXED2_DOWN:
         return true;
      case EFFECTIVENP_MODEL1_UP:
         return false;
      case EFFECTIVENP_MODEL1_DOWN:
         return true;
      case EFFECTIVENP_MODEL2_UP:
         return false;
      case EFFECTIVENP_MODEL2_DOWN:
         return true;
      case EFFECTIVENP_MODEL3_UP:
         return false;
      case EFFECTIVENP_MODEL3_DOWN:
         return true;
      case EFFECTIVENP_MODEL4_UP:
         return false;
      case EFFECTIVENP_MODEL4_DOWN:
         return true;
      case EFFECTIVENP_STAT1_UP:
         return false;
      case EFFECTIVENP_STAT1_DOWN:
         return true;
      case EFFECTIVENP_STAT2_UP:
         return false;
      case EFFECTIVENP_STAT2_DOWN:
         return true;
      case EFFECTIVENP_STAT3_UP:
         return false;
      case EFFECTIVENP_STAT3_DOWN:
         return true;
      case ETAINTERCALIBRATION_THEORY_UP:
         return false;
      case ETAINTERCALIBRATION_THEORY_DOWN:
         return true;
      case ETAINTERCALIBRATION_TOTALSTAT_UP:
         return false;
      case ETAINTERCALIBRATION_TOTALSTAT_DOWN:
         return true;
      case FLAVOR_COMP_UP:
         return false;
      case FLAVOR_COMP_DOWN:
         return true;
      case FLAVOR_RESPONSE_UP:
         return false;
      case FLAVOR_RESPONSE_DOWN:
         return true;
      case PILEUP_OFFSETMU_UP:
         return false;
      case PILEUP_OFFSETMU_DOWN:
         return true;
      case PILEUP_OFFSETNPV_UP:
         return false;
      case PILEUP_OFFSETNPV_DOWN:
         return true;
      case RELATIVENONCLOSURE_MC11B_UP:
         return false;
      case RELATIVENONCLOSURE_MC11B_DOWN:
         return true;
      case SINGLEPARTICLE_HIGHPT_UP:
         return false;
      case SINGLEPARTICLE_HIGHPT_DOWN:
         return true;
      case CELLOUTU:
         return false;
      case CELLOUTD:
         return true;
      case PILEUPU:
         return false;
      case PILEUPD:
         return true;
      case BKGD_JES_UP:
         return false;
      case BKGD_JES_DOWN:
         return true;
      case JESU:
         return false;
      case JESD:
         return true;
      default:
         return false;
      }
   };
   
   static Sample GetPartner(const Sample sample){
      switch(sample){
      case NOMINAL:
         return NUM_OF_SAMPLES;
      case BTAGSFUP:
         return BTAGSFDOWN;
      case BTAGSFDOWN:
         return BTAGSFUP;
      case CTAGSFUP:
         return CTAGSFDOWN;
      case CTAGSFDOWN:
         return CTAGSFUP;
      case MISTAGSFUP:
         return MISTAGSFDOWN;
      case MISTAGSFDOWN:
         return MISTAGSFUP;
      case EERU:
         return EERD;
      case EERD:
         return EERU;
      case EESU:
         return EESD;
      case EESD:
         return EESU;
      case JEFF:
         return NUM_OF_SAMPLES;
      case JER:
         return NUM_OF_SAMPLES;
      case LOOSE:
         return NUM_OF_SAMPLES;
      case MUIDU:
         return MUIDD;
      case MUIDD:
         return MUIDU;
      case MUSC:
         return NUM_OF_SAMPLES;
      case MUMSU:
         return MUMSD;
      case MUMSD:
         return MUMSU;
      case LEP_ID_SFUP:
         return LEP_ID_SFDOWN;
      case LEP_ID_SFDOWN:
         return LEP_ID_SFUP;
      case LEP_RECO_SFUP:
         return LEP_RECO_SFDOWN;
      case LEP_RECO_SFDOWN:
         return LEP_RECO_SFUP;
      case LEP_TRIG_SFUP:
         return LEP_TRIG_SFDOWN;
      case LEP_TRIG_SFDOWN:
         return LEP_TRIG_SFUP;
      case WJETS_IQOPT3:
         return NUM_OF_SAMPLES;
      case WJETS_PTJMIN10:
         return NUM_OF_SAMPLES;
      case WJETS_BB4_UP:
         return WJETS_BB4_DOWN;
      case WJETS_BB4_DOWN:
         return WJETS_BB4_UP;
      case WJETS_BB5_UP:
         return WJETS_BB5_DOWN;
      case WJETS_BB5_DOWN:
         return WJETS_BB5_UP;
      case WJETS_BBCCC_UP:
         return WJETS_BBCCC_DOWN;
      case WJETS_BBCCC_DOWN:
         return WJETS_BBCCC_UP;
      case WJETS_BBCC_UP:
         return WJETS_BBCC_DOWN;
      case WJETS_BBCC_DOWN:
         return WJETS_BBCC_UP;
      case WJETS_C4_UP:
         return WJETS_C4_DOWN;
      case WJETS_C4_DOWN:
         return WJETS_C4_UP;
      case WJETS_C5_UP:
         return WJETS_C5_DOWN;
      case WJETS_C5_DOWN:
         return WJETS_C5_UP;
      case WJETS_CA_UP:
         return WJETS_CA_DOWN;
      case WJETS_CA_DOWN:
         return WJETS_CA_UP;
      case IFSRPLUS:
         return IFSRMINUS;
      case IFSRMINUS:
         return IFSRPLUS;
      case FSRPLUS:
         return FSRMINUS;
      case FSRMINUS:
         return FSRPLUS;
      case ISRPLUS:
         return ISRMINUS;
      case ISRMINUS:
         return ISRPLUS;
      case ALPGENJIMMY:
         return NUM_OF_SAMPLES;
      case POWHEG_JIMMY:
         return POWHEG_PYTHIA;
      case POWHEG_PYTHIA:
         return POWHEG_JIMMY;
      case QCDSU:
         return QCDSD;
      case QCDSD:
         return QCDSU;
      case QCDU:
         return QCDD;
      case QCDD:
         return QCDU;
      case UNFOLDING:
         return NUM_OF_SAMPLES;
      case BINBYBIN:
         return NUM_OF_SAMPLES;
      case MIGRATIONTOYS:
         return NUM_OF_SAMPLES;
      case PDF:
         return NUM_OF_SAMPLES;
      case HADRONIZATION:
         return NUM_OF_SAMPLES;
      case LUMI:
         return NUM_OF_SAMPLES;
      case MC_GENERATOR:
         return NUM_OF_SAMPLES;
      case BJESUNC_UP:
         return BJESUNC_DOWN;
      case BJESUNC_DOWN:
         return BJESUNC_UP;
      case CLOSEBY_UP:
         return CLOSEBY_DOWN;
      case CLOSEBY_DOWN:
         return CLOSEBY_UP;
      case EFFECTIVENP_DET1_UP:
         return EFFECTIVENP_DET1_DOWN;
      case EFFECTIVENP_DET1_DOWN:
         return EFFECTIVENP_DET1_UP;
      case EFFECTIVENP_DET2_UP:
         return EFFECTIVENP_DET2_DOWN;
      case EFFECTIVENP_DET2_DOWN:
         return EFFECTIVENP_DET2_UP;
      case EFFECTIVENP_MIXED1_UP:
         return EFFECTIVENP_MIXED1_DOWN;
      case EFFECTIVENP_MIXED1_DOWN:
         return EFFECTIVENP_MIXED1_UP;
      case EFFECTIVENP_MIXED2_UP:
         return EFFECTIVENP_MIXED2_DOWN;
      case EFFECTIVENP_MIXED2_DOWN:
         return EFFECTIVENP_MIXED2_UP;
      case EFFECTIVENP_MODEL1_UP:
         return EFFECTIVENP_MODEL1_DOWN;
      case EFFECTIVENP_MODEL1_DOWN:
         return EFFECTIVENP_MODEL1_UP;
      case EFFECTIVENP_MODEL2_UP:
         return EFFECTIVENP_MODEL2_DOWN;
      case EFFECTIVENP_MODEL2_DOWN:
         return EFFECTIVENP_MODEL2_UP;
      case EFFECTIVENP_MODEL3_UP:
         return EFFECTIVENP_MODEL3_DOWN;
      case EFFECTIVENP_MODEL3_DOWN:
         return EFFECTIVENP_MODEL3_UP;
      case EFFECTIVENP_MODEL4_UP:
         return EFFECTIVENP_MODEL4_DOWN;
      case EFFECTIVENP_MODEL4_DOWN:
         return EFFECTIVENP_MODEL4_UP;
      case EFFECTIVENP_STAT1_UP:
         return EFFECTIVENP_STAT1_DOWN;
      case EFFECTIVENP_STAT1_DOWN:
         return EFFECTIVENP_STAT1_UP;
      case EFFECTIVENP_STAT2_UP:
         return EFFECTIVENP_STAT2_DOWN;
      case EFFECTIVENP_STAT2_DOWN:
         return EFFECTIVENP_STAT2_UP;
      case EFFECTIVENP_STAT3_UP:
         return EFFECTIVENP_STAT3_DOWN;
      case EFFECTIVENP_STAT3_DOWN:
         return EFFECTIVENP_STAT3_UP;
      case ETAINTERCALIBRATION_THEORY_UP:
         return ETAINTERCALIBRATION_THEORY_DOWN;
      case ETAINTERCALIBRATION_THEORY_DOWN:
         return ETAINTERCALIBRATION_THEORY_UP;
      case ETAINTERCALIBRATION_TOTALSTAT_UP:
         return ETAINTERCALIBRATION_TOTALSTAT_DOWN;
      case ETAINTERCALIBRATION_TOTALSTAT_DOWN:
         return ETAINTERCALIBRATION_TOTALSTAT_UP;
      case FLAVOR_COMP_UP:
         return FLAVOR_COMP_DOWN;
      case FLAVOR_COMP_DOWN:
         return FLAVOR_COMP_UP;
      case FLAVOR_RESPONSE_UP:
         return FLAVOR_RESPONSE_DOWN;
      case FLAVOR_RESPONSE_DOWN:
         return FLAVOR_RESPONSE_UP;
      case PILEUP_OFFSETMU_UP:
         return PILEUP_OFFSETMU_DOWN;
      case PILEUP_OFFSETMU_DOWN:
         return PILEUP_OFFSETMU_UP;
      case PILEUP_OFFSETNPV_UP:
         return PILEUP_OFFSETNPV_DOWN;
      case PILEUP_OFFSETNPV_DOWN:
         return PILEUP_OFFSETNPV_UP;
      case RELATIVENONCLOSURE_MC11B_UP:
         return RELATIVENONCLOSURE_MC11B_DOWN;
      case RELATIVENONCLOSURE_MC11B_DOWN:
         return RELATIVENONCLOSURE_MC11B_UP;
      case SINGLEPARTICLE_HIGHPT_UP:
         return SINGLEPARTICLE_HIGHPT_DOWN;
      case SINGLEPARTICLE_HIGHPT_DOWN:
         return SINGLEPARTICLE_HIGHPT_UP;
      case CELLOUTU:
         return CELLOUTD;
      case CELLOUTD:
         return CELLOUTU;
      case PILEUPU:
         return PILEUPD;
      case PILEUPD:
         return PILEUPU;
      case BKGD_JES_UP:
         return BKGD_JES_DOWN;
      case BKGD_JES_DOWN:
         return BKGD_JES_UP;
      case JESU:
         return JESD;
      case JESD:
         return JESU;
      default:
         return NUM_OF_SAMPLES;
      }
   };
   
private:
   Sample m_sample;
   std::string m_sampleString;
   
   bool m_isUp;
   bool m_isDown;
   
   };
   
   
   #endif
   
   
